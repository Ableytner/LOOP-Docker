services:
  db:
    container_name: loop-db
    image: postgres
    restart: always
    ports:
      - ${OUTSIDE_POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - PG_DATA=/var/lib/postgresql/data
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - loop-network

  adminer:
    container_name: loop-adminer
    image: adminer
    restart: always
    ports:
      - ${OUTSIDE_ADMINER_PORT}:${ADMINER_PORT}
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    networks:
      - loop-network

  prestart:
    container_name: loop-prestart
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - loop-network

  backend:
    container_name: loop-backend
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    restart: always
    ports:
      - ${OUTSIDE_BACKEND_PORT}:${BACKEND_PORT}
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health_check" ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - loop-network

  frontend:
    container_name: loop-frontend
    image: oven/bun
    restart: always
    ports:
      - ${OUTSIDE_FRONTEND_PORT}:${FRONTEND_PORT}
    build:
      context: ./frontend
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    networks:
      - loop-network

volumes:
  app-db-data:


networks:
  loop-network:
    external: true
